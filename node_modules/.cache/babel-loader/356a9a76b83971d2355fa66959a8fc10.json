{"ast":null,"code":"import _objectSpread from \"/Users/wonjikyang/OneDrive - OECD/SWAC/Africapolis/PAC/Interactive graph/pac-digitalstories/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/wonjikyang/OneDrive - OECD/SWAC/Africapolis/PAC/Interactive graph/pac-digitalstories/src/Components/CountryShape/CountryShape.js\";\nimport React from 'react';\nimport classes from './CountryShape.module.css';\nimport { easeQuadOut } from 'd3-ease';\nimport { feature } from 'topojson';\nimport { Animate } from 'react-move';\nimport { interpolate } from 'flubber';\nimport _ from 'lodash';\n\nclass CountryShape extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {// states: this.props.shape[0].features.map(d => { return d.geometry.coordinates })\n    };\n\n    this.update = () => {\n      // take the first one, put it at the end\n      this.setState(({\n        states\n      }) => ({\n        states: [...states.slice(1), states[0]]\n      }));\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          shape = _this$props.shape,\n          query = _this$props.query;\n\n    let shapes = _objectSpread({}, shape).data; // let selectedCountry = _.chain(shapes)\n    //     .filter(shape => shape.properties.ID === Number(query.country) )\n    //     .map(shape => ({\n    //         ID: shape.properties.ID,\n    //         coordinates: shape.geometry.coordinates\n    //     }))\n    //     .value();\n\n\n    console.log(shapes.features.map(d => d.geometry.coordinates[0])); // let states = shapes.map(shape => shape.geometry.coordinates);\n    // const { state : { states } } = this;\n    // const interpolator = interpolate(states[0], states[1])\n    // console.log(states);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CountryShape;","map":{"version":3,"sources":["/Users/wonjikyang/OneDrive - OECD/SWAC/Africapolis/PAC/Interactive graph/pac-digitalstories/src/Components/CountryShape/CountryShape.js"],"names":["React","classes","easeQuadOut","feature","Animate","interpolate","_","CountryShape","Component","state","update","setState","states","slice","render","props","shape","query","shapes","data","console","log","features","map","d","geometry","coordinates"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;;AACA,MAAMC,YAAN,SAA2BP,KAAK,CAACQ,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAGvCC,KAHuC,GAG/B,CACJ;AADI,KAH+B;;AAAA,SAOvCC,MAPuC,GAO9B,MAAM;AAAE;AACb,WAAKC,QAAL,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,MAAiB;AAC7BA,QAAAA,MAAM,EAAE,CACN,GAAGA,MAAM,CAACC,KAAP,CAAa,CAAb,CADG,EAEND,MAAM,CAAC,CAAD,CAFA;AADqB,OAAjB,CAAd;AAMH,KAdsC;AAAA;;AAgBvCE,EAAAA,MAAM,GAAG;AAAA,wBAGA,KAAKC,KAHL;AAAA,UAEDC,KAFC,eAEDA,KAFC;AAAA,UAEMC,KAFN,eAEMA,KAFN;;AAIL,QAAIC,MAAM,GAAG,kBAAKF,KAAL,EAAaG,IAA1B,CAJK,CAKL;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,QAAP,CAAgBC,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,QAAF,CAAWC,WAAX,CAAuB,CAAvB,CAAzB,CAAZ,EAdK,CAeL;AACA;AACA;AACA;;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAmCH;;AAtEsC;;AAyE3C,eAAenB,YAAf","sourcesContent":["import React from 'react';\nimport classes from './CountryShape.module.css';\nimport { easeQuadOut } from 'd3-ease';\nimport { feature } from 'topojson'\nimport { Animate } from 'react-move';\nimport { interpolate } from 'flubber';\nimport _ from 'lodash';\nclass CountryShape extends React.Component {\n \n \n    state = {\n        // states: this.props.shape[0].features.map(d => { return d.geometry.coordinates })\n      }\n    \n    update = () => { // take the first one, put it at the end\n        this.setState(({ states }) => ({\n          states: [\n            ...states.slice(1),\n            states[0],\n          ],\n        }))\n    }\n    \n    render() {\n        const { \n            shape, query\n         } = this.props;\n        let shapes = { ...shape }.data;\n        // let selectedCountry = _.chain(shapes)\n        //     .filter(shape => shape.properties.ID === Number(query.country) )\n        //     .map(shape => ({\n        //         ID: shape.properties.ID,\n        //         coordinates: shape.geometry.coordinates\n        //     }))\n        //     .value();\n        \n\n        console.log(shapes.features.map(d => d.geometry.coordinates[0]));\n        // let states = shapes.map(shape => shape.geometry.coordinates);\n        // const { state : { states } } = this;\n        // const interpolator = interpolate(states[0], states[1])\n        // console.log(states);\n        return (\n            <div>\n                {/* <Animate\n                    start={{\n                        opacity: 0,\n                        d: selectedCountry[0].coordinates //interpolator(1),\n                    }}\n\n                    enter={[\n                        {\n                        opacity: [0.7],\n                        timing: { duration: 1000 },\n                        },\n                    ]}\n\n                    update={{\n                        d: selectedCountry[0].coordinates,\n                        timing: { duration: 1000, ease: easeQuadOut },\n                    }}\n                    >\n                    {(state) => {\n                        return (\n                        <svg viewBox='0 0 300 300' >\n                            <g transform=\"translate(100, 0) scale(0.8)\">\n                                <path\n                                fill=\"#ff69b4\"\n                                {...state}\n                                />\n                            </g>\n                        </svg>\n                        )\n                    }}\n                </Animate> */}\n            </div>\n        )\n    }\n}\n\nexport default CountryShape;"]},"metadata":{},"sourceType":"module"}