{"ast":null,"code":"var _jsxFileName = \"/Users/wonjikyang/Desktop/pac-digitalstories/src/Components/Visualisation/LineGraph/LineGraph.js\";\nimport React from 'react';\nimport { ResponsiveContainer, LineChart, YAxis, XAxis, Line, Tooltip, CartesianGrid } from 'recharts';\nimport classes from './LineGraph.module.css';\n\nconst lineGraph = props => {\n  const data = props.data,\n        query = props.query;\n\n  let toPercent = value => {\n    let domain;\n\n    switch (data.type) {\n      case 'Upop':\n        domain = `${value.toLocaleString(\"ru-RU\")}`;\n        break;\n\n      case 'Urbanlevel':\n        domain = `${value.toFixed(0)}%`;\n        break;\n\n      case 'NumAgllos':\n        domain = value;\n        break;\n\n      case 'Mpop':\n        domain = `${value.toFixed(0)}%`;\n        ;\n        break;\n\n      case 'ADBA':\n        domain = `${value.toFixed(0)}km`;\n        ;\n        break;\n\n      default:\n        domain = null;\n    }\n\n    return domain;\n  };\n\n  let lineChart = React.createElement(ResponsiveContainer, {\n    height: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    data: data.data,\n    margin: {\n      top: 10,\n      right: 20,\n      left: 20,\n      bottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    vertical: false,\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    stroke: 'black',\n    interval: 0,\n    tick: React.createElement(CustomizedAxisTick, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }),\n    tickSize: 10,\n    dataKey: 'year',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    tickFormatter: toPercent,\n    dataKey: \"value\",\n    strokeWidth: \"0px\",\n    stroke: \"black\",\n    tick: {\n      fontSize: '11px'\n    },\n    domain: [dataMin => min(dataMin, data.type), dataMax => max(dataMax, data.type)],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    cursor: {\n      strokeWidth: 0\n    },\n    content: renderTooltip,\n    type: data.type,\n    language: query.language,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    strokeWidth: \"3px\",\n    stroke: '#a70000',\n    fill: \"#a70000\",\n    activeDot: {\n      r: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })));\n  return React.createElement(\"div\", {\n    className: classes.LineGraph,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, lineChart);\n};\n\nexport default lineGraph;\n\nconst CustomizedAxisTick = props => {\n  const x = props.x,\n        y = props.y,\n        payload = props.payload;\n  return React.createElement(\"g\", {\n    transform: `translate(${x},${y})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    dy: 16,\n    fontSize: '11px',\n    textAnchor: \"middle\",\n    fill: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, payload.value));\n};\n\nconst min = type => {\n  let domain;\n\n  switch (type) {\n    case 'Upop':\n      domain = 0;\n      break;\n\n    case 'Urbanlevel':\n      domain = 0;\n      break;\n\n    case 'NumAgllos':\n      domain = 0;\n      break;\n\n    case 'Mpop':\n      domain = 0;\n      break;\n\n    case 'ADBA':\n      domain = 0;\n      break;\n\n    default:\n      domain = null;\n  }\n\n  return domain;\n};\n\nconst max = (value, type) => {\n  let domain;\n\n  switch (type) {\n    case 'Upop':\n      domain = Math.round((value + 10000) / 10000) * 10000;\n      break;\n\n    case 'Urbanlevel':\n      domain = 100;\n      break;\n\n    case 'NumAgllos':\n      domain = value;\n      break;\n\n    case 'Mpop':\n      domain = 100;\n      break;\n\n    case 'ADBA':\n      domain = Math.round((value + 50) / 100) * 100;\n      break;\n\n    default:\n      domain = null;\n  }\n\n  return domain;\n};\n\nconst renderTooltip = props => {\n  if (props.active && props.payload !== null && props.payload[0] !== null) {\n    let payload = props.payload[0].payload;\n    let inhab = 'inhabitants',\n        agglos = 'agglomerations';\n\n    if (props.language === 'fr') {\n      inhab = 'habitants';\n      agglos = 'agglom√©rations';\n    }\n\n    let tooltip = null;\n\n    switch (props.type) {\n      case 'Upop':\n        tooltip = React.createElement(\"p\", {\n          className: classes.Tooltip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \"), \" \", inhab);\n        break;\n\n      case 'Urbanlevel':\n        tooltip = React.createElement(\"p\", {\n          className: classes.Tooltip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, Math.round(payload.value), \" %\");\n        break;\n\n      case 'NumAgllos':\n        tooltip = React.createElement(\"p\", {\n          className: classes.Tooltip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \"), \" \", agglos);\n        break;\n\n      case 'Mpop':\n        tooltip = React.createElement(\"p\", {\n          className: classes.Tooltip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, Math.round(payload.value), \" %\");\n        break;\n\n      case 'ADBA':\n        tooltip = React.createElement(\"p\", {\n          className: classes.Tooltip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \"), \" km\");\n        break;\n\n      default:\n        tooltip = null;\n    }\n\n    return tooltip;\n  }\n};","map":{"version":3,"sources":["/Users/wonjikyang/Desktop/pac-digitalstories/src/Components/Visualisation/LineGraph/LineGraph.js"],"names":["React","ResponsiveContainer","LineChart","YAxis","XAxis","Line","Tooltip","CartesianGrid","classes","lineGraph","props","data","query","toPercent","value","domain","type","toLocaleString","toFixed","lineChart","top","right","left","bottom","fontSize","dataMin","min","dataMax","max","strokeWidth","renderTooltip","language","r","LineGraph","CustomizedAxisTick","x","y","payload","Math","round","active","inhab","agglos","tooltip","parseFloat","toString","replace"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ResponsiveContainer, LineChart, YAxis, XAxis, Line, Tooltip, CartesianGrid  } from 'recharts'\nimport classes from './LineGraph.module.css';\n\nconst lineGraph = props => {\n    const { data, query } = props;\n\n    let toPercent = value => {\n        let domain;\n        switch( data.type ) {\n            case 'Upop' : \n                domain = `${value.toLocaleString(\"ru-RU\")}`;\n            break;\n            case 'Urbanlevel' : \n                domain = `${(value).toFixed(0)}%`;\n            break;\n            case 'NumAgllos' : \n                domain = value;\n            break;\n            case 'Mpop' : \n                domain = `${(value).toFixed(0)}%`;;\n            break;\n            case 'ADBA' : \n                domain = `${(value).toFixed(0)}km`;;\n            break;\n            default: \n            domain = null;\n        }\n        return domain;\n    }\n\n    let lineChart = (\n        <ResponsiveContainer height=\"100%\" >\n            <LineChart data={data.data} margin={{top: 10, right: 20, left: 20, bottom: 10}}\n                >\n                <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                <XAxis stroke={'black'} interval={0} tick={<CustomizedAxisTick />} tickSize={10} dataKey={'year'} />\n                <YAxis tickFormatter={toPercent} dataKey='value' strokeWidth=\"0px\" stroke='black' tick={{fontSize: '11px'}} \n                    domain ={ [ (dataMin) => min(dataMin, data.type), (dataMax) => max(dataMax, data.type) ] }/>\n                {/* domain={domain(data.type, 'dataMin', 'dataMax')} /> */}\n                <Tooltip cursor={{ strokeWidth: 0 }} content={renderTooltip} type={data.type} language={query.language} />\n                <Line type=\"monotone\" dataKey=\"value\" strokeWidth=\"3px\" stroke={'#a70000'} fill=\"#a70000\" activeDot={{r: 10}}/>\n            </LineChart>\n        </ResponsiveContainer>\n    )\n\n    return (\n        <div className={classes.LineGraph}>\n            {lineChart}\n        </div>\n    );\n}\n\nexport default lineGraph;\n\nconst CustomizedAxisTick = props => {\n    const { x, y, payload } = props\n  \n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text dy={16} fontSize={'11px'} textAnchor='middle' fill='black'>{payload.value}</text>\n      </g>\n    )\n}\n\nconst min = (type) => {\n    let domain;\n    switch( type ) {\n        case 'Upop' : \n            domain = 0;\n        break;\n        case 'Urbanlevel' : \n            domain = 0;\n        break;\n        case 'NumAgllos' : \n            domain = 0;\n        break;\n        case 'Mpop' : \n            domain = 0;\n        break;\n        case 'ADBA' : \n            domain = 0;\n        break;\n        default: \n        domain = null;\n    }\n    return domain;\n}\n\nconst max = (value, type) => {\n    let domain;\n    switch( type ) {\n        case 'Upop' : \n            domain = Math.round( (value + 10000) /10000)*10000;\n        break;\n        case 'Urbanlevel' : \n            domain = 100;\n        break;\n        case 'NumAgllos' : \n            domain = value;\n        break;\n        case 'Mpop' : \n            domain = 100;\n        break;\n        case 'ADBA' : \n            domain = Math.round( (value + 50) / 100) * 100;\n        break;\n        default: \n        domain = null;\n    }\n    return domain;\n}\n\nconst renderTooltip = props => {\n    if ( props.active && props.payload !== null && props.payload[0] !== null ){\n        let payload = props.payload[0].payload;\n    let inhab = 'inhabitants', agglos = 'agglomerations';\n    if(props.language === 'fr') {\n        inhab = 'habitants'\n        agglos = 'agglom√©rations';\n    }\n\n\n    let tooltip = null;\n    switch( props.type ) {\n        case 'Upop' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} {inhab}\n                </p>\n            )\n        break;\n        case 'Urbanlevel' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {Math.round(payload.value)} %\n                </p>\n            )\n        break;\n        case 'NumAgllos' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} {agglos}\n                </p>\n            )\n        break;\n        case 'Mpop' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {Math.round(payload.value)} %\n                </p>\n            )\n        break;\n        case 'ADBA' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} km\n                </p>\n            )\n        break;\n        default: \n            tooltip = null;\n    }\n    \n    return tooltip;\n    \n    }\n}\n"]},"metadata":{},"sourceType":"module"}