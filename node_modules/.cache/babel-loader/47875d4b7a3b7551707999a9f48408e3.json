{"ast":null,"code":"var _jsxFileName = \"/Users/wonjiky/Desktop/pac-digitalstories/src/App.js\";\nimport React from 'react';\nimport queryString from 'query-string';\nimport LayoutContainer from './Container/Layout/LayoutContainer';\nimport Countries from './data/countries';\nimport Shapefile from './data/geo_country';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      country: Countries,\n      shape: Shapefile\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          country = _this$state.country,\n          shape = _this$state.shape;\n    const routes = [{\n      ID: 1,\n      component: LayoutContainer,\n      path: \"/\",\n      exact: true\n    }];\n    let keyFigureList = [{\n      \"ID\": 1,\n      \"label\": \"Upop\",\n      \"type\": \"Urban population\",\n      \"type_FR\": \"Population urbaine\",\n      \"description\": \"Total number of people living in urban agglomerations\",\n      \"description_FR\": \"Nombre total de personnes vivant dans les agglomérations urbaines\"\n    }, {\n      \"ID\": 2,\n      \"label\": \"Urbanlevel\",\n      \"type\": \"Level of urbanisation\",\n      \"type_FR\": \"Niveau d'urbanisation\",\n      \"description\": \"Share of the urban population in total population\",\n      \"description_FR\": \"Part de la population métropolitaine dans la population totale\"\n    }, {\n      \"ID\": 3,\n      \"label\": \"NumAgllos\",\n      \"type\": \"Number of agglomerations\",\n      \"type_FR\": \"Nombre d'agglomérations\",\n      \"description\": \"Total number of people living in urban agglomerations\",\n      \"description_FR\": \"Nombre total d'agglomérations dans le pays\"\n    }, {\n      \"ID\": 4,\n      \"label\": \"Mpop\",\n      \"type\": \"Metropolitan population\",\n      \"type_FR\": \"Population métropolitaine\",\n      \"description\": \"Total number of people living in urban agglomerations\",\n      \"description_FR\": \"Part de la population métropolitaine dans la population totale\"\n    }, {\n      \"ID\": 5,\n      \"label\": \"ADBA\",\n      \"type\": \"Average distance between agglomerations\",\n      \"type_FR\": \"Distance moyenne entre les agglomérations\",\n      \"description\": \"Total number of people living in urban agglomerations\",\n      \"description_FR\": \"Distance moyenne entre les agglomérations urbaines, calculée comme moyenne de la distance entre toutes les paires de villes\"\n    }];\n    return React.createElement(BrowserRouter, {\n      basename: \"/pac-digitalstories\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, routes.map(({\n      ID,\n      component: C,\n      path,\n      exact\n    }) => React.createElement(Route, {\n      key: ID,\n      path: path,\n      exact: exact,\n      render: ({\n        location,\n        history\n      }) => React.createElement(C, {\n        query: getParams(location),\n        history: history,\n        data: country,\n        shape: shape,\n        keyFigureList: keyFigureList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction getParams(location) {\n  const queries = queryString.parse(location.search);\n  return queries;\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/wonjiky/Desktop/pac-digitalstories/src/App.js"],"names":["React","queryString","LayoutContainer","Countries","Shapefile","Route","BrowserRouter","App","Component","state","country","shape","render","routes","ID","component","path","exact","keyFigureList","map","C","location","history","getParams","queries","parse","search"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,kBAArC;AACA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEjCC,KAFiC,GAEzB;AACPC,MAAAA,OAAO,EAAEP,SADF;AAEPQ,MAAAA,KAAK,EAAEP;AAFA,KAFyB;AAAA;;AAOjCQ,EAAAA,MAAM,GAAG;AAAA,wBAGJ,KAAKH,KAHD;AAAA,UAEPC,OAFO,eAEPA,OAFO;AAAA,UAEEC,KAFF,eAEEA,KAFF;AAKR,UAAME,MAAM,GAAG,CACd;AAAEC,MAAAA,EAAE,EAAC,CAAL;AAAQC,MAAAA,SAAS,EAAEb,eAAnB;AAAoCc,MAAAA,IAAI,EAAE,GAA1C;AAA+CC,MAAAA,KAAK,EAAE;AAAtD,KADc,CAAf;AAIA,QAAIC,aAAa,GAAG,CACV;AAAE,YAAM,CAAR;AAAW,eAAS,MAApB;AAA4B,cAAQ,kBAApC;AAAwD,iBAAW,oBAAnE;AAAyF,qBAAe,uDAAxG;AAAiK,wBAAkB;AAAnL,KADU,EAEV;AAAE,YAAM,CAAR;AAAW,eAAS,YAApB;AAAkC,cAAQ,uBAA1C;AAAmE,iBAAW,uBAA9E;AAAuG,qBAAe,mDAAtH;AAA2K,wBAAkB;AAA7L,KAFU,EAGV;AAAE,YAAM,CAAR;AAAW,eAAS,WAApB;AAAiC,cAAQ,0BAAzC;AAAqE,iBAAW,yBAAhF;AAA2G,qBAAe,uDAA1H;AAAmL,wBAAkB;AAArM,KAHU,EAIV;AAAE,YAAM,CAAR;AAAW,eAAS,MAApB;AAA4B,cAAQ,yBAApC;AAA+D,iBAAW,2BAA1E;AAAuG,qBAAe,uDAAtH;AAA+K,wBAAkB;AAAjM,KAJU,EAKV;AAAE,YAAM,CAAR;AAAW,eAAS,MAApB;AAA4B,cAAQ,yCAApC;AAA+E,iBAAW,2CAA1F;AAAuI,qBAAe,uDAAtJ;AAA+M,wBAAkB;AAAjO,KALU,CAApB;AAQA,WACC,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAC,qBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEL,MAAM,CAACM,GAAP,CAAY,CAAC;AAACL,MAAAA,EAAD;AAAKC,MAAAA,SAAS,EAAEK,CAAhB;AAAmBJ,MAAAA,IAAnB;AAAyBC,MAAAA;AAAzB,KAAD,KACZ,oBAAC,KAAD;AACC,MAAA,GAAG,EAAEH,EADN;AAEC,MAAA,IAAI,EAAEE,IAFP;AAGC,MAAA,KAAK,EAAEC,KAHR;AAIC,MAAA,MAAM,EAAE,CAAE;AAACI,QAAAA,QAAD;AAAWC,QAAAA;AAAX,OAAF,KACP,oBAAC,CAAD;AACC,QAAA,KAAK,EAAEC,SAAS,CAACF,QAAD,CADjB;AAEC,QAAA,OAAO,EAAEC,OAFV;AAGC,QAAA,IAAI,EAAEZ,OAHP;AAIC,QAAA,KAAK,EAAEC,KAJR;AAKC,QAAA,aAAa,EAAEO,aALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF,CADD;AAoBA;;AA5CgC;;AA+ClC,SAASK,SAAT,CAAmBF,QAAnB,EAA6B;AAC5B,QAAMG,OAAO,GAAGvB,WAAW,CAACwB,KAAZ,CAAkBJ,QAAQ,CAACK,MAA3B,CAAhB;AACA,SAAOF,OAAP;AACA;;AAED,eAAejB,GAAf","sourcesContent":["import React from 'react';\nimport queryString from 'query-string';\nimport LayoutContainer from './Container/Layout/LayoutContainer';\nimport Countries from './data/countries';\nimport Shapefile from './data/geo_country';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n\tstate = {\n\t\tcountry: Countries,\n\t\tshape: Shapefile,\n\t}\n\n\trender() {\n\t\tconst { \n\t\t\tcountry, shape\n\t\t} = this.state;\n\n\t\tconst routes = [\n\t\t\t{ ID:1, component: LayoutContainer, path: \"/\", exact: true}\n\t\t];\n\n\t\tlet keyFigureList = [\n            { \"ID\": 1, \"label\": \"Upop\", \"type\": \"Urban population\", \"type_FR\": \"Population urbaine\", \"description\": \"Total number of people living in urban agglomerations\", \"description_FR\": \"Nombre total de personnes vivant dans les agglomérations urbaines\" },\n            { \"ID\": 2, \"label\": \"Urbanlevel\", \"type\": \"Level of urbanisation\", \"type_FR\": \"Niveau d'urbanisation\", \"description\": \"Share of the urban population in total population\", \"description_FR\": \"Part de la population métropolitaine dans la population totale\" },\n            { \"ID\": 3, \"label\": \"NumAgllos\", \"type\": \"Number of agglomerations\", \"type_FR\": \"Nombre d'agglomérations\", \"description\": \"Total number of people living in urban agglomerations\", \"description_FR\": \"Nombre total d'agglomérations dans le pays\" },\n            { \"ID\": 4, \"label\": \"Mpop\", \"type\": \"Metropolitan population\", \"type_FR\": \"Population métropolitaine\", \"description\": \"Total number of people living in urban agglomerations\", \"description_FR\": \"Part de la population métropolitaine dans la population totale\" },\n            { \"ID\": 5, \"label\": \"ADBA\", \"type\": \"Average distance between agglomerations\", \"type_FR\": \"Distance moyenne entre les agglomérations\", \"description\": \"Total number of people living in urban agglomerations\", \"description_FR\": \"Distance moyenne entre les agglomérations urbaines, calculée comme moyenne de la distance entre toutes les paires de villes\" }\n        ];\n\n\t\treturn (\n\t\t\t<BrowserRouter basename='/pac-digitalstories'>\n\t\t\t\t{routes.map( ({ID, component: C, path, exact}) => (\n\t\t\t\t\t<Route \n\t\t\t\t\t\tkey={ID}\n\t\t\t\t\t\tpath={path}\n\t\t\t\t\t\texact={exact}\n\t\t\t\t\t\trender={( {location, history}) =>\n\t\t\t\t\t\t\t<C \n\t\t\t\t\t\t\t\tquery={getParams(location)} \n\t\t\t\t\t\t\t\thistory={history} \n\t\t\t\t\t\t\t\tdata={country} \n\t\t\t\t\t\t\t\tshape={shape} \n\t\t\t\t\t\t\t\tkeyFigureList={keyFigureList} \n\t\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t\t} \n\t\t\t\t\t/>\n\t\t\t\t) )}\n\t\t\t</BrowserRouter>\n\t\t)\n\t}\n}\n\nfunction getParams(location) {\n\tconst queries = queryString.parse(location.search);\n\treturn queries;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}