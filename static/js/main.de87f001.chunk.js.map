{"version":3,"sources":["Container/Layout/Layout.module.css","Components/SearchBar/SearchBar.module.css","Components/CountryShape/CountryShape.module.css","Components/Mixer/Mixer.module.css","Components/Visualisation/Visualisation.module.css","Components/KeyFigures/KeyFigures.module.css","Components/Visualisation/LineGraph/LineGraph.module.css","Components/SearchBar/SearchBar.js","Components/CountryShape/CountryShape.js","Components/Mixer/Mixer.js","Components/Visualisation/LineGraph/LineGraph.js","Components/KeyFigures/KeyFigures.js","Components/Visualisation/Visualisation.js","Container/Layout/Layout.js","Container/Layout/LayoutContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","indicatorSeparator","base","state","menu","backgroundColor","borderRadius","boxShadow","menuList","maxHeight","height","dropdownIndicator","control","borderStyle","borderColor","borderWidth","color","singleValue","fontSize","fontWeight","input","searchBar","props","options","query","className","classes","SearchBar","onChange","onSearchChange","menuIsOpen","value","country","countryShape","CountryShape","mixer","countryList","Mixer","lineGraph","data","language","lineChart","width","margin","top","right","left","bottom","strokeWidth","stroke","tick","dataKey","hide","type","domain","cursor","content","renderTooltip","fill","activeDot","r","LineGraph","active","payload","inhab","agglos","tooltip","Tooltip","parseFloat","toString","replace","Math","round","onKeyFigureChange","lang","checkValue","filter","d","keyfigure","KeyFigures","map","Fragment","key","ID","checked","visualisation","keyFigureList","history","location","pathname","dataType","filterData","res","i","push","year","cleanData","label","Visualisation","Layout","pushQueries","oldParameters","queryType","Object","keys","updatedParams","encodeURIComponent","search","join","this","dataLanguage","c","ISO","length","entries","e","target","React","Component","LayoutContainer","newParameters","newQueries","getParams","queryString","parse","App","Countries","routes","component","path","exact","basename","C","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de87f001.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3XWY9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"SearchBar_SearchBar__2hOf6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountryShape\":\"CountryShape_CountryShape__3z8pV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Mixer\":\"Mixer_Mixer__3Ls7_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Visualisation\":\"Visualisation_Visualisation__2E_VQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"KeyFigures\":\"KeyFigures_KeyFigures__3DV5s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LineGraph\":\"LineGraph_LineGraph__T-tQr\"};","import React from 'react';\nimport classes from './SearchBar.module.css';\nimport Select from 'react-select';\n\nconst searchBar = props => {\n\n    const {\n        options,\n        query,\n    } = props;\n\n    return (\n        <div className={classes.SearchBar}>\n            <Select \n                styles={styles}\n                onChange={props.onSearchChange}\n                menuIsOpen={true}\n                options={options}\n                value={options[query.country-1]}\n            />\n        </div>\n    )\n}\n\nconst styles = {\n    indicatorSeparator: (base, state) => {\n\n    },\n    menu: (base, state) => {\n        return {\n            ...base,\n            backgroundColor: \"#fef7e7\",\n            borderRadius: 0,\n            boxShadow: 0,\n            // opacity: \".9\"\n        }\n    },\n    menuList: (base, state) => {\n        return {\n            ...base,\n            maxHeight: 'none',\n            height: '340px',\n        }\n    },\n    dropdownIndicator: (base, state) => {\n      return { ...base,\n        \n      };\n    },\n    control: (base, state) => {\n      return { ...base, \n        boxShadow: 'none',\n        backgroundColor: 'none',\n        borderStyle: 'solid', \n        borderColor: '#449999',\n        borderWidth: '0px',\n        color: 'none', \n        \"&:hover\": { \n        }\n      };\n    },\n    singleValue: (base, state) => {\n      return {\n        ...base,\n        fontSize:'2rem',\n        fontWeight:'600',\n        color: '#212529',\n      }\n    },\n    input: (base, state) => {\n      return {\n        ...base,\n        fontSize:'2rem',\n        fontWeight:'900',\n        color: '#212529'\n      }\n    }\n};\n\nexport default searchBar","import React from 'react';\nimport classes from './CountryShape.module.css';\n\nconst countryShape = props => {\n\n    return (\n        <div className={classes.CountryShape}>\n            Country Shape\n        </div>\n    )\n}\n\nexport default countryShape;","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport CountryShape from '../CountryShape/CountryShape';\nimport classes from './Mixer.module.css';\n\n\nconst mixer = props => {\n\n    const { \n        countryList,\n        query\n    } = props;\n\n    return (\n        <div className={classes.Mixer}>\n            <CountryShape />\n            <SearchBar \n                options={countryList}\n                \n                onSearchChange={props.onSearchChange}\n                query={query}\n                />\n        </div>\n    )\n}\n\nexport default mixer;\n","import React from 'react';\nimport { ResponsiveContainer, LineChart, YAxis, XAxis, Line, Tooltip  } from 'recharts'\nimport classes from './LineGraph.module.css';\n\nconst lineGraph = props => {\n    const { data, language } = props;\n    let lineChart = (\n        <ResponsiveContainer width=\"100%\" height=\"100%\" >\n            <LineChart data={data.data}\n                margin={{top: 10, right: 20, left: 20, bottom: 10}}\n                >\n                <XAxis strokeWidth=\"1px\" stroke={'black'} tick={{fontSize: '11px'}} dataKey={'year'} />\n                <YAxis hide={true} tick={{fontSize: '12px'}} type=\"number\" domain={[0, 'dataMax']} />\n                <Tooltip cursor={{ strokeWidth: 0 }} content={renderTooltip} type={data.type} language={language} />\n                <Line type=\"monotone\" dataKey=\"value\" strokeWidth=\"3px\" stroke={'#a70000'} fill=\"#a70000\" activeDot={{r: 10}}/>\n            </LineChart>\n        </ResponsiveContainer>\n    )\n\n    return (\n        <div className={classes.LineGraph}>\n            {lineChart}\n        </div>\n    );\n}\n\nexport default lineGraph;\n\nconst renderTooltip = props => {\n    if ( props.active && props.payload !== null && props.payload[0] !== null ){\n        let payload = props.payload[0].payload;\n    let inhab = 'inhabitants', agglos = 'agglomerations';\n    if(props.language === 'fr') {\n        inhab = 'habitants'\n        agglos = 'agglomérations';\n    }\n\n\n    let tooltip = null;\n    switch( props.type ) {\n        case 'Upop' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} {inhab}\n                </p>\n            )\n        break;\n        case 'Urbanlevel' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {Math.round(payload.value * 100)} %\n                </p>\n            )\n        break;\n        case 'NumAgllos' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} {agglos}\n                </p>\n            )\n        break;\n        case 'Mpop' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {Math.round(payload.value * 100)} %\n                </p>\n            )\n        break;\n        case 'ADBA' : \n            tooltip = (\n                <p className={classes.Tooltip}>\n                    {parseFloat(payload.value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} km\n                </p>\n            )\n        break;\n        default: \n            tooltip = null;\n    }\n    \n    return tooltip;\n    \n    }\n}\n","import React from 'react';\nimport classes from './KeyFigures.module.css';\n\nexport default props => {\n\n    const { data, query, onKeyFigureChange } = props;\n    let lang = 'type';\n    if ( props.language === 'fr') lang = 'type_FR';\n    \n    let checkValue = data.filter(d => d.type === query.keyfigure)\n    return (\n        <form className={classes.KeyFigures}>\n            {data.map(d => (\n                <React.Fragment key={d.ID}>\n                    <input \n                        key={d.ID}\n                        type=\"radio\" \n                        value={d.ID} \n                        checked={checkValue[0].ID === d.ID} \n                        onChange={onKeyFigureChange}\n                    />\n                    <label>\n                        {d[lang]}   \n                    </label> \n                </React.Fragment>\n            ))}\n        </form> \n    );\n}\n","import React from 'react';\nimport classes from './Visualisation.module.css';\nimport LineGraph from './LineGraph/LineGraph';\nimport KeyFigures from '../KeyFigures/KeyFigures';\n\nconst visualisation = props => {\n    const { \n        keyFigureList, \n        language, data,\n        query, history } = props;\n\n    let country = history.location.pathname === '/fr' ? 'Country_FR' : 'Country',\n    dataType = keyFigureList.filter(d => d.type === query.keyfigure );\n\n    let filterData = {\n        country: country,\n        data: cleanData(data[dataType[0].label]),\n        type: dataType[0].label\n    }\n    \n    function cleanData(data) {\n        let res = [];\n        for (let i in data) {\n            res.push({ year: i, value: data[i]})\n        }\n        return res;\n    }\n\n    return (\n        <div className={classes.Visualisation}> \n             <LineGraph \n                data={filterData}\n                language={query.lang}\n             />\n             <KeyFigures \n                language={language}\n                query={query}\n                data={keyFigureList}             \n                onKeyFigureChange={props.onKeyFigureChange}\n             />\n        </div>\n    )\n};\n\nexport default visualisation;","import React from 'react';\nimport classes from './Layout.module.css';\nimport Mixer from '../../Components/Mixer/Mixer';\nimport Visualisation from '../../Components/Visualisation/Visualisation';\n\n\nclass Layout extends React.Component {\n    state = { }\n\n    pushQueries = value => {\n\n        let oldParameters, queryType;\n        oldParameters = { ...this.props.query };\n        queryType = Object.keys(value)[0];\n        oldParameters[queryType] = value[queryType];\n        const updatedParams = [];\n\n        for (let i in oldParameters) {\n            updatedParams.push(\n                encodeURIComponent(i) + \"=\" + encodeURIComponent(oldParameters[i])\n                );\n            }\n\n        this.props.history.push({\n\t\t\tpathname: this.props.history.location.pathname,\n\t\t\tsearch: \"?\" + updatedParams.join(\"&\")\n\t\t});\n\t}\n    \n    render() {\n        const { \n            data,\n            history,\n            query,\n            keyFigureList,\n        } = this.props;\n\n        //Set searchbar options\n        let dataLanguage = 'Country'\n        if ( query.lang === 'fr') dataLanguage='Country_FR';\n        let countryList = data.map(c => ({ value: c.ISO, label: c[dataLanguage] }))\n\n\n\n        if ( data.length === 0 ||\n            Object.entries(query).length ===0 ){\n                return <div> Loading ...</div>\n            } else {\n                return (\n                    <div className={classes.Layout}>\n                        <Mixer \n                            countryList={countryList}\n                            query={query}\n                            onSearchChange={e => this.pushQueries({ country: e.value })}\n                        />\n                        <Visualisation \n                            query={query}\n                            history={history}\n                            onKeyFigureChange={e => this.pushQueries({ \n                                keyfigure: keyFigureList[e.target.value -1 ].type\n                            })}\n                            language={query.lang}\n                            data={data[query.country - 1]}\n                            keyFigureList={keyFigureList}\n                        />\n                    </div>\n                )\n        }   \n    }\n}\n\n\nexport default Layout;","import React from 'react';\nimport Layout from './Layout';\n\nclass LayoutContainer extends React.Component {\n\n\tcomponentDidMount() {\n        if ( Object.entries(this.props.query).length === 0 ) {\n            this.pushQueries({country: 1, keyfigure: \"Urban population\", lang: 'en'})\n        }\n\t}\n\t\n\tpushQueries = oldParameters => {\n        let newParameters = oldParameters;\n        const updatedParams = [];\n        for (let i in newParameters) {\n            updatedParams.push(\n                encodeURIComponent(i) + \"=\" + encodeURIComponent(newParameters[i])\n            );\n        }\n        const newQueries = updatedParams.join(\"&\");\n\n        return this.props.history.push({\n            pathname: this.props.history.location.pathname,\n            search: \"?\" + newQueries\n        });\n\t}\n\n    render() { return <Layout {...this.props} /> }\n};\n\nexport default LayoutContainer;","import React from 'react';\nimport queryString from 'query-string';\nimport LayoutContainer from './Container/Layout/LayoutContainer';\nimport Countries from './data/countries';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n\tstate = {\n\t\tcountry: Countries,\n\t}\n\n\trender() {\n\t\tconst { \n\t\t\tcountry,\n\t\t} = this.state;\n\n\t\tconst routes = [\n\t\t\t{ ID:1, component: LayoutContainer, path: \"/\", exact: true}\n\t\t];\n\n\t\tlet keyFigureList = [\n            { \"ID\": 1, \"label\": \"Upop\", \"type\": \"Urban population\", \"type_FR\": \"Population urbaine\" },\n            { \"ID\": 2, \"label\": \"Urbanlevel\", \"type\": \"Level of urbanisation\", \"type_FR\": \"Niveau d'urbanisation\" },\n            { \"ID\": 3, \"label\": \"NumAgllos\", \"type\": \"Number of agglomerations\", \"type_FR\": \"Nombre d'agglomérations\" },\n            { \"ID\": 4, \"label\": \"Mpop\", \"type\": \"Metropolitan population\", \"type_FR\": \"Population métropolitaine\" },\n            { \"ID\": 5, \"label\": \"ADBA\", \"type\": \"Average distance between agglomerations\", \"type_FR\": \"Distance moyenne entre les agglomérations\" }\n        ];\n\n\t\treturn (\n\t\t\t<BrowserRouter basename='/pac-digitalstories'>\n\t\t\t\t{routes.map( ({ID, component: C, path, exact}) => (\n\t\t\t\t\t<Route \n\t\t\t\t\t\tkey={ID}\n\t\t\t\t\t\tpath={path}\n\t\t\t\t\t\texact={exact}\n\t\t\t\t\t\trender={( {location, history}) =>\n\t\t\t\t\t\t\t<C query={getParams(location)} history={history} data={country} keyFigureList={keyFigureList} /> } \n\t\t\t\t\t/>\n\t\t\t\t) )}\n\t\t\t</BrowserRouter>\n\t\t)\n\t}\n}\n\nfunction getParams(location) {\n\tconst queries = queryString.parse(location.search);\n\treturn queries;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}